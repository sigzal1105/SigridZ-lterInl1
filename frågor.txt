Jag siktar på VG.

1. När använder man add respektive commit?

Man använder add när man ska lägga till en fil i staging area. 
Det som ligger is staging area är det som kommer "commitas" när man använder kommandot commit.

När något commitas så blir det som en "save-point" i ditt repository där du kan navigera mellan olika
versioner av ditt projekt.

2. Vad är pull respektive push?

git push laddar upp nya commits till remote repository så att andra användare kan se och använda det 
medans pull laddar hem förändringar från andra som man själv kan se och använda.

3. När använder man log respektive status?

Med git status får man reda på vad som hänt, eller skulle kunna hända i ditt repository. 
Man kan t.ex. se om något har skapats, om något har blivit modifierat, vad som har lagts till 
i staging area, vilken branch man är på m.m. Man vill använda det för att se om det finns något
man behöver göra med sitt repository.

Med git log kan man se sin commit-historik med dess meddelanden från den aktuella branchen. Senaste commit
visas först. Alla commits har en commit-sträng. Man vill använda denna för att se vad man har gjort i sina
commits.

4. Vad är Git branch och varför är de viktiga?

En git branch är som det låter, en ny gren i historik-trädet. Detta gör att man kan arbeta med något nytt 
utan att behöva ändra på sitt main repository. Man kan ha flera branches samtidigt och flera människor 
kan jobba med var sin samtidigt. Med merge kan man slå ihop sin branch med sin main om man är nöjd med sin nya feature.

Svar på VG fråga:

git checkout(restore): Detta kommandot är bra för att kolla på gamla commits utan att ändra och även byta till en annan branch.
T.ex. Om jag vill kolla på när jag först skapade Guesser.java. Då kan jag skriva git checkout fe6086a för att komma dit. Om jag nu
kör ls så finns bara den filen där. Det ser ut som det gjorde när jag skapade filen. 

Alltså om man skriver kommandot git checkout(restore) och commitens hash-ID gör det att man kan gå tillbaka till en tidigare commit med
givet ID. Dock hamnar man i ett så kallat "'detatched HEAD' state" alltså att HEAD flyttas till committen vilket gör 
att alla förändringar som görs härifrån inte kommer committas till en branch. Sedan med git checkout(restore) branch_name så kan
man byta till en annan branch i sitt repository.


git revert: Detta kommandot gör att man ångrar en commit. T.ex. Om jag inte vill inte ha kvar min run_game.sh
då kan jag köra git revert 7f8863f. Nu är den filen borta, men finns kvar i historiken. HEAD ligger nu på en ny commit
där ändringarna i 7f8863f har ångrats.
 
Alltså om man vill ångra en feature man lade till innan. Då kan man skriva git revert och committens hash-ID och då kommer 
det skapas en ny commit där ändringarna du gjorde i commiten du revertade är borta. Committen du revertade 
finns fortfarande kvar i historiken när man använder detta kommado. Detta gör att historik inte går förlorad 
och andra kan se att du tagit bort något. Bra i en public branch.

git reset: Detta kommandot raderar en commit och dess historik permanent. Det finns olika flaggor till detta kommandot.

git reset --mixed. Denna flagga är default alltså samma som att bara skriva git reset. T.ex. Om jag skriver git reset 
på 62ddecf "Added frågor.txt with contents" så kommer committen tas bort och den unstagas. Men ändringen finns fortfarande
i working directory. Detta är bra om man t.ex. vill ta bort en fil som inte skulle med så kan man ta bort commit, unstaga ändra 
och sedan add och commit igen.

git reset --soft. Denna tar tar bort en commit, men den ligger fortfarande i staging arean och är redo att commitas.
Detta är bra om man t.ex. stavat fel. T.ex. jag använder git reset --soft 62ddecf. Den är fortfarande addad i
staging area men commiten togs bort.

git reset --hard. Denna tar bort allt. Ändringarna finns inte kvar i working directory och historiken tas bort. Det är som om
den aldrig fanns. Detta är bra om man vill ta bort något och inte ha historik. Bättre i ett private repository. T.ex.
jag gjorde git reset --hard på 62ddecf. Committen är nu borta, den är borta från staging area och den är borta från working directory.
